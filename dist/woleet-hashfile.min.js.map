{"version":3,"sources":["woleet-hashfile.js"],"names":["root","factory","woleet","window","findBasePath","scripts","document","getElementsByTagName","scriptsArray","Array","prototype","slice","call","script","src","match","regex","substr","lastIndexOf","checkFileReaderSyncSupport","makeWorker","URL","webkitURL","Blob","Worker","blob","createObjectURL","Promise","syncDetectionScript","resolve","worker","onmessage","e","api","file","protocol","testNativeCryptoSupport","crypto","subtle","digest","isHTTPS","basePath","DEFAULT_WORKER_SCRIPT","workerScriptPath","Hasher","ready","cb_start","cb_progress","cb_result","cb_error","this","on","event","callback","Error","HashWorker","hash","next","reject","message","undefined","data","progress","result","error","start","console","trace","postMessage","hashLocal","size","reader","FileReader","algo","SHA256","create","prev","onloadstart","onloadend","finalize","_hash","toString","CryptoJS","enc","Hex","onprogress","buf","target","loaded","chunkUint8","Uint8Array","wordArr","lib","WordArray","sha256","update","total","readAsArrayBuffer","hashLocalWithNativeAPI","onload","hashResult","hexString","reduce","res","files","max_native_crypto_size","hashWorker","FileList","File","testFileReaderSupport","then","WorkerSupported","iter","i","len","terminate","hashMethod","_worker","length","isReady","_hashStringOrFile","progressCallback","resolveHash","rejectHash","hashPromise","hasher","isSHA256"],"mappings":"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","file":"woleet-hashfile.min.js","sourcesContent":["/**\n * @typedef {Object}   ProgressMessage\n * @typedef {Number}   ProgressMessage.progress (float number)\n * @typedef {File}     ProgressMessage.file\n */\n\n/**\n * @typedef {Object}   StartMessage\n * @typedef {Boolean}  StartMessage.start always true\n * @typedef {File}     ProgressMessage.file\n */\n\n/**\n * @typedef {Object}   ErrorMessage\n * @typedef {Error}    ErrorMessage.error\n * @typedef {File}     EndMessage.file\n */\n\n/**\n * @typedef {Object}   EndMessage\n * @typedef {String}   EndMessage.end hash of the file\n * @typedef {File}     EndMessage.file\n */\n\n;(function (root, factory) {\n    root.woleet = factory(root.woleet)\n})(window, function (woleet) {\n\n    const api = woleet || {};\n    api.file = api.file || {};\n\n    const isHTTPS = location.protocol == 'https:';\n\n    //noinspection JSUnresolvedVariable\n    const testNativeCryptoSupport = window.crypto && window.crypto.subtle && window.crypto.subtle.digest && isHTTPS;\n\n    const testFileReaderSupport = checkFileReaderSyncSupport();\n\n    /**\n     * @returns {String} get the base path (including final '/') of the current script.\n     */\n    function findBasePath() {\n        let scripts = document.getElementsByTagName('script');\n        let scriptsArray = Array.prototype.slice.call(scripts, 0); // Converts collection to array\n        let regex = /.*woleet-(hashfile|weblibs)[.min]*\\.js$/;\n        let script = scriptsArray.find((script) => script.src && script.src.match(regex));\n        return script && script.src ? script.src.substr(0, script.src.lastIndexOf(\"/\") + 1) : null;\n    }\n\n    // Guess the path of the worker script: same as current script's or defined by woleet.workerScriptPath\n    let basePath = findBasePath();\n    let DEFAULT_WORKER_SCRIPT = \"woleet-hashfile-worker.min.js\";\n    //noinspection JSUnresolvedVariable\n    let workerScriptPath = (api.workerScriptPath || (basePath ? basePath + DEFAULT_WORKER_SCRIPT : null));\n    if (!workerScriptPath)\n        throw new Error('Cannot find ' + DEFAULT_WORKER_SCRIPT);\n\n    /**\n     * Check support for workers.\n     */\n    function checkFileReaderSyncSupport() {\n\n        function makeWorker(script) {\n            //noinspection JSUnresolvedVariable\n            let URL = window.URL || window.webkitURL;\n            let Blob = window.Blob;\n            let Worker = window.Worker;\n\n            if (!URL || !Blob || !Worker || !script) return null;\n\n            let blob = new Blob([script]);\n            //noinspection JSUnresolvedFunction\n            return new Worker(URL.createObjectURL(blob));\n        }\n\n        return new Promise(function (resolve) {\n            let syncDetectionScript = \"onmessage = function(e) { postMessage(!!FileReaderSync); };\";\n            try {\n                let worker = makeWorker(syncDetectionScript);\n                if (worker) {\n                    worker.onmessage = function (e) {\n                        resolve(e.data);\n                    };\n                    worker.postMessage({});\n                }\n                else resolve(false);\n            } catch (err) {\n                resolve(false);\n            }\n        });\n    }\n\n    api.file.Hasher = function () {\n\n        let ready = true;\n        let cb_start, cb_progress, cb_result, cb_error;\n\n        /**\n         * @param {String} event\n         * @param {Function} callback\n         */\n        this.on = function (event, callback) {\n            switch (event) {\n                case 'start':\n                    cb_start = callback;\n                    break;\n                case 'progress':\n                    cb_progress = callback;\n                    break;\n                case 'error':\n                    cb_error = callback;\n                    break;\n                case 'result':\n                    cb_result = callback;\n                    break;\n                default:\n                    throw new Error('Invalid event name \"' + event + '\"');\n            }\n        };\n\n        /**\n         * @constructor\n         */\n        const HashWorker = function () {\n\n            let worker = new Worker(workerScriptPath);\n\n            /**\n             * @param {File} file\n             * @returns {Promise}\n             */\n            this.hash = function (file) {\n                return new Promise((next, reject) => {\n\n                    worker.onmessage = function (message) {//handling worker message\n                        if (message.data.progress != undefined) {\n                            if (cb_progress) cb_progress(message.data);\n                        }\n                        else if (message.data.result) {\n                            if (cb_result) cb_result(message.data);\n                            next(worker);\n                        }\n                        else if (message.data.start) {\n                            if (cb_start) cb_start(message.data);\n                        }\n                        else if (message.data.error) {\n                            let error = message.data.error;\n                            if (cb_error) cb_error(error);\n                            else reject(error);\n                        }\n                        else {\n                            console.trace(\"Unexpected worker message: \", message);\n                        }\n                    };\n\n                    worker.postMessage(file);\n                });\n            };\n\n        };\n\n        /**\n         * @param {File} file\n         * @returns {Promise}\n         */\n        const hashLocal = function (file) {\n\n            return new Promise((next, reject) => {\n                let error = new Error(\"file_too_big_to_be_hashed_without_worker\");\n                if (file.size > 5e7) {\n                    ready = true;\n                    if (cb_error) return cb_error({error: error, file: file});\n                    else reject(error);\n                }\n\n                let reader = new FileReader();\n\n                let sha256 = CryptoJS.algo.SHA256.create();\n                let hash, prev = 0;\n\n                reader.onloadstart = () => {\n                    if (cb_start) cb_start({start: true, file: file});\n                };\n\n                reader.onloadend = () => {\n                    hash.finalize();\n                    if (cb_result) cb_result({\n                        result: hash._hash.toString(CryptoJS.enc.Hex),\n                        file: file\n                    });\n                    next();\n                };\n\n                reader.onprogress = (e) => {\n                    //noinspection JSUnresolvedVariable\n                    /** @type ArrayBuffer */\n                    let buf = e.target.result;\n                    //noinspection JSUnresolvedVariable\n                    let blob = buf.slice(prev, e.loaded);\n                    let chunkUint8 = new Uint8Array(blob);\n                    let wordArr = CryptoJS.lib.WordArray.create(chunkUint8);\n                    hash = sha256.update(wordArr);\n                    //noinspection JSUnresolvedVariable\n                    prev = e.loaded;\n                    if (cb_progress) {\n                        //noinspection JSUnresolvedVariable\n                        cb_progress({progress: (e.loaded / e.total), file: file});\n                    }\n                };\n\n                reader.readAsArrayBuffer(file);\n            });\n        };\n\n        /**\n         * @param {File} file\n         * @returns {Promise}\n         */\n        const hashLocalWithNativeAPI = function (file) {\n            return new Promise((resolve, reject) => {\n                let algo = \"SHA-256\";\n                // entry point\n                let reader = new FileReader();\n\n                reader.onloadstart = () => {\n                    if (cb_start) cb_start({start: true, file: file});\n                };\n\n                reader.onprogress = (e) => {\n                    if (cb_progress) { //noinspection JSUnresolvedVariable\n                        cb_progress({progress: (e.loaded / e.total), file: file});\n                    }\n                };\n\n                reader.onload = function (event) {\n                    let data = event.target.result;\n                    //noinspection JSUnresolvedFunction,JSUnresolvedVariable\n                    window.crypto.subtle.digest(algo, data)\n                        .then(function (hash) {\n                            let hashResult = new Uint8Array(hash);\n                            let hexString = hashResult.reduce((res, e) => res + ('00' + e.toString(16)).slice(-2), '');\n                            if (cb_result) cb_result({result: hexString, file: file});\n                            resolve();\n                        })\n                        .catch((error) => cb_error ? cb_error({error: error, file: file}) : reject(error));\n                };\n\n                reader.readAsArrayBuffer(file);\n            })\n        };\n\n        this.start = function (files) {\n\n            const max_native_crypto_size = 5e8; // ~500MB\n\n            let hashWorker = null; // We may have to keep the hashWorker\n\n            if (!ready) throw new Error(\"not_ready\");\n\n            ready = false;\n\n            // checking input type\n            if (!(files instanceof FileList || files instanceof File))\n                throw new Error(\"invalid_parameter\");\n\n            testFileReaderSupport\n                .then((WorkerSupported) => {\n\n                    /**\n                     * iterator function with selected hash method\n                     * @param {Number} i current index of the list\n                     * @param {Number} len total size of the list\n                     * @param {FileList|[File]} files file list\n                     * @param {Worker} [worker] passing worker through iterator if selected method is hashWorker in order to terminate it\n                     */\n                    function iter(i, len, files, worker) {\n\n                        if ((i >= len)) {\n                            ready = true;\n                            if (worker) worker.terminate();\n                        }\n                        else {\n\n                            // We choose here the better method to hash a file\n                            let hashMethod = null;\n                            if (testNativeCryptoSupport && files[i].size < max_native_crypto_size) {\n                                hashMethod = hashLocalWithNativeAPI;\n                            }\n                            else if (WorkerSupported) {\n                                if (!hashWorker) hashWorker = new HashWorker(); // if worker instance has already been called\n                                hashMethod = hashWorker.hash;\n                            }\n                            else if (typeof CryptoJS !== 'undefined') {\n                                hashMethod = hashLocal;\n                            }\n                            else {\n                                throw new Error(\"no_viable_hash_method\");\n                            }\n\n                            hashMethod(files[i]).then((_worker) => {\n                                iter(i + 1, len, files, _worker || worker);\n                            })\n                        }\n                    }\n\n                    // entry point\n                    if (files instanceof FileList) { // files is a FileList\n                        iter(0, files.length, files);\n                    }\n                    else if (files instanceof File) { // files is a single file\n                        iter(0, 1, [files]);\n                    }\n                })\n\n        };\n\n        this.isReady = function () {\n            return ready;\n        };\n    };\n\n    /**\n     * @param {File|String} file\n     * @param {Function} [progressCallback]\n     * @returns {Promise<Hash>}\n     */\n    api._hashStringOrFile = function (file, progressCallback) {\n        let resolveHash;\n        let rejectHash;\n        let hashPromise = new Promise(function (resolve, reject) {\n            resolveHash = resolve;\n            rejectHash = reject;\n        });\n\n        if (file instanceof File) {\n\n            if (!api.file || !api.file.Hasher) throw new Error(\"missing_woleet_hash_dependency\");\n\n            let hasher = new api.file.Hasher;\n            //noinspection JSUnusedLocalSymbols\n            hasher.on('result', function (message, file) {\n                resolveHash(message.result);\n                if (progressCallback) progressCallback({progress: 1.0, file: File})\n            });\n\n            if (progressCallback && typeof progressCallback == 'function') {\n                hasher.on('progress', progressCallback);\n            }\n\n            hasher.on('error', function (error) {\n                rejectHash(error);\n            });\n\n            hasher.start(file)\n        }\n        else if (typeof file == \"string\") {\n            if (api.isSHA256(file)) {\n                //noinspection JSUnusedAssignment\n                resolveHash(file);\n            }\n            else {\n                //noinspection JSUnusedAssignment\n                rejectHash(new Error(\"parameter_string_not_a_sha256_hash\"));\n            }\n        }\n        else {\n            //noinspection JSUnusedAssignment\n            rejectHash(new Error(\"invalid_parameter\"));\n        }\n\n        return hashPromise;\n    };\n\n    return api;\n});"]}
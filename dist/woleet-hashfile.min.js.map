{"version":3,"sources":["woleet-hashfile.js"],"names":["root","factory","woleet","window","findBasePath","scripts","document","getElementsByTagName","scriptsArray","Array","prototype","slice","call","script","src","match","regex","substr","lastIndexOf","checkFileReaderSyncSupport","makeWorker","URL","webkitURL","Blob","Worker","blob","createObjectURL","Promise","syncDetectionScript","resolve","worker","onmessage","e","testFileReaderSupport","crypto","subtle","digest","testNativeCryptoSupport","api","file","basePath","DEFAULT_WORKER_SCRIPT","workerScriptPath","Hasher","ready","cb_start","cb_progress","cb_result","cb_error","this","on","event","callback","Error","hashWorker","next","reject","data","progress","message","result","error","start","console","trace","postMessage","hashLocal","size","reader","FileReader","sha256","CryptoJS","algo","SHA256","create","hash","onloadstart","onloadend","enc","Hex","onprogress","buf","target","prev","loaded","chunkUint8","Uint8Array","wordArr","total","readAsArrayBuffer","hashLocalWithNativeAPI","onload","then","hashResult","reduce","res","toString","hexString","catch","files","FileList","File","len","i","hashMethod","iter","WorkerSupported","isReady","_hashStringOrFile","rejectHash","progressCallback","hashPromise","resolveHash","hasher","isSHA256"],"mappings":"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","file":"woleet-hashfile.min.js","sourcesContent":["/**\n * @typedef {Object}   ProgressMessage\n * @typedef {Number}   ProgressMessage.progress (float number)\n * @typedef {File}     ProgressMessage.file\n */\n\n/**\n * @typedef {Object}   StartMessage\n * @typedef {Boolean}  StartMessage.start always true\n * @typedef {File}     ProgressMessage.file\n */\n\n/**\n * @typedef {Object}   ErrorMessage\n * @typedef {Error}    ErrorMessage.error\n * @typedef {File}     EndMessage.file\n */\n\n/**\n * @typedef {Object}   EndMessage\n * @typedef {String}   EndMessage.end hash of the file\n * @typedef {File}     EndMessage.file\n */\n\n;(function (root, factory) {\n    root.woleet = factory(root.woleet)\n})(window, function (woleet) {\n\n    const testFileReaderSupport = checkFileReaderSyncSupport();\n    //noinspection JSUnresolvedVariable\n    const testNativeCryptoSupport = window.crypto && window.crypto.subtle && window.crypto.subtle.digest;\n\n    const api = woleet || {};\n    api.file = api.file || {};\n\n    /**\n     * @returns {String} get the base path (including final '/') of the current script.\n     */\n    function findBasePath() {\n        let scripts = document.getElementsByTagName('script');\n        let scriptsArray = Array.prototype.slice.call(scripts, 0); // Converts collection to array\n        let regex = /.*woleet-(hashfile|weblibs)[.min]*\\.js$/;\n        let script = scriptsArray.find((script) => script.src && script.src.match(regex));\n        return script && script.src ? script.src.substr(0, script.src.lastIndexOf(\"/\") + 1) : null;\n    }\n\n    // Guess the path of the worker script: same as current script's or defined by woleet.workerScriptPath\n    let basePath = findBasePath();\n    let DEFAULT_WORKER_SCRIPT = \"woleet-hashfile-worker.min.js\";\n    //noinspection JSUnresolvedVariable\n    let workerScriptPath = (api.workerScriptPath || (basePath ? basePath + DEFAULT_WORKER_SCRIPT : null));\n    if (!workerScriptPath)\n        throw new Error('Cannot find ' + DEFAULT_WORKER_SCRIPT);\n\n    /**\n     * Check support for workers.\n     */\n    function checkFileReaderSyncSupport() {\n\n        function makeWorker(script) {\n            //noinspection JSUnresolvedVariable\n            let URL = window.URL || window.webkitURL;\n            let Blob = window.Blob;\n            let Worker = window.Worker;\n\n            if (!URL || !Blob || !Worker || !script) return null;\n\n            let blob = new Blob([script]);\n            //noinspection JSUnresolvedFunction\n            return new Worker(URL.createObjectURL(blob));\n        }\n\n        return new Promise(function (resolve) {\n            let syncDetectionScript = \"onmessage = function(e) { postMessage(!!FileReaderSync); };\";\n            try {\n                let worker = makeWorker(syncDetectionScript);\n                if (worker) {\n                    worker.onmessage = function (e) {\n                        resolve(e.data);\n                    };\n                    worker.postMessage({});\n                }\n                else resolve(false);\n            } catch (err) {\n                resolve(false);\n            }\n        });\n    }\n\n    api.file.Hasher = function () {\n\n        let ready = true;\n        let cb_start, cb_progress, cb_result, cb_error;\n\n        /**\n         * @param {String} event\n         * @param {Function} callback\n         */\n        this.on = function (event, callback) {\n            switch (event) {\n                case 'start':\n                    cb_start = callback;\n                    break;\n                case 'progress':\n                    cb_progress = callback;\n                    break;\n                case 'error':\n                    cb_error = callback;\n                    break;\n                case 'result':\n                    cb_result = callback;\n                    break;\n                default:\n                    throw new Error('Invalid event name \"' + event + '\"');\n            }\n        };\n\n        /**\n         * @param {File} file\n         * @returns {Promise}\n         */\n        const hashWorker = function (file) {\n            return new Promise((next, reject) => {\n\n                let worker = new Worker(workerScriptPath);\n\n                worker.onmessage = function (message) {//handling worker message\n                    if (message.data.progress != undefined) {\n                        if (cb_progress) cb_progress(message.data);\n                    }\n                    else if (message.data.result) {\n                        if (cb_result) cb_result(message.data);\n                        next();\n                    }\n                    else if (message.data.start) {\n                        if (cb_start) cb_start(message.data);\n                    }\n                    else if (message.data.error) {\n                        let error = message.data.error;\n                        if (cb_error) cb_error(error);\n                        else reject(error);\n                    }\n                    else {\n                        console.trace(\"Unexpected worker message: \", message);\n                    }\n                };\n\n                worker.postMessage(file);\n            });\n        };\n\n        /**\n         * @param {File} file\n         * @returns {Promise}\n         */\n        const hashLocal = function (file) {\n\n            return new Promise((next, reject) => {\n                let error = new Error(\"file_too_big_to_be_hashed_without_worker\");\n                if (file.size > 5e7) {\n                    ready = true;\n                    if (cb_error) return cb_error({error: error, file: file});\n                    else reject(error);\n                }\n\n                let reader = new FileReader();\n\n                let sha256 = CryptoJS.algo.SHA256.create();\n                let hash, prev = 0;\n\n                reader.onloadstart = () => {\n                    if (cb_start) cb_start({start: true, file: file});\n                };\n\n                reader.onloadend = () => {\n                    hash.finalize();\n                    if (cb_result) cb_result({\n                        result: hash._hash.toString(CryptoJS.enc.Hex),\n                        file: file\n                    });\n                    next();\n                };\n\n                reader.onprogress = (e) => {\n                    //noinspection JSUnresolvedVariable\n                    /** @type ArrayBuffer */\n                    let buf = e.target.result;\n                    //noinspection JSUnresolvedVariable\n                    let blob = buf.slice(prev, e.loaded);\n                    let chunkUint8 = new Uint8Array(blob);\n                    let wordArr = CryptoJS.lib.WordArray.create(chunkUint8);\n                    hash = sha256.update(wordArr);\n                    //noinspection JSUnresolvedVariable\n                    prev = e.loaded;\n                    if (cb_progress) {\n                        //noinspection JSUnresolvedVariable\n                        cb_progress({progress: (e.loaded / e.total), file: file});\n                    }\n                };\n\n                reader.readAsArrayBuffer(file);\n            });\n        };\n\n        /**\n         * @param {File} file\n         * @returns {Promise}\n         */\n        const hashLocalWithNativeAPI = function (file) {\n            return new Promise((resolve, reject) => {\n                let algo = \"SHA-256\";\n                // entry point\n                let reader = new FileReader();\n\n                reader.onloadstart = () => {\n                    if (cb_start) cb_start({start: true, file: file});\n                };\n\n                reader.onprogress = (e) => {\n                    if (cb_progress) { //noinspection JSUnresolvedVariable\n                        cb_progress({progress: (e.loaded / e.total), file: file});\n                    }\n                };\n\n                reader.onload = function (event) {\n                    let data = event.target.result;\n                    //noinspection JSUnresolvedFunction,JSUnresolvedVariable\n                    window.crypto.subtle.digest(algo, data)\n                        .then(function (hash) {\n                            let hashResult = new Uint8Array(hash);\n                            let hexString = hashResult.reduce((res, e) => res + ('00' + e.toString(16)).slice(-2), '');\n                            if (cb_result) cb_result({result: hexString, file: file});\n                            resolve();\n                        })\n                        .catch((error) => cb_error ? cb_error({error: error, file: file}) : reject(error));\n                };\n\n                reader.readAsArrayBuffer(file);\n            })\n        };\n\n        this.start = function (files) {\n\n            if (!ready) throw new Error(\"not_ready\");\n\n            ready = false;\n\n            // checking input type\n            if (!(files instanceof FileList || files instanceof File))\n                throw new Error(\"invalid_parameter\");\n\n            testFileReaderSupport\n                .then((WorkerSupported) => {\n                    let hashMethod = null;\n                    if (testNativeCryptoSupport) {\n                        hashMethod = hashLocalWithNativeAPI;\n                    }\n                    else if (WorkerSupported) {\n                        hashMethod = hashWorker;\n                    }\n                    else if (typeof CryptoJS !== 'undefined') {\n                        hashMethod = hashLocal;\n                    }\n                    else {\n                        throw new Error(\"no_viable_hash_method\");\n                    }\n\n                    // set iterator function with selected hash method\n                    function iter(i, len) {\n                        if ((i >= len)) {\n                            ready = true;\n                        }\n                        else {\n                            hashMethod(files[i]).then(() => {\n                                iter(++i, len)\n                            })\n                        }\n                    }\n\n                    // entry point\n                    if (files instanceof FileList) { // files is a FileList\n                        iter(0, files.length);\n                    }\n                    else if (files instanceof File) { // files is a single file\n                        hashMethod(files).then(() => {\n                            ready = true;\n                        })\n                    }\n                })\n\n        };\n\n        this.isReady = function () {\n            return ready;\n        };\n    };\n\n    /**\n     * @param {File|String} file\n     * @param {Function} [progressCallback]\n     * @returns {Promise<Hash>}\n     */\n    api._hashStringOrFile = function (file, progressCallback) {\n        let resolveHash;\n        let rejectHash;\n        let hashPromise = new Promise(function (resolve, reject) {\n            resolveHash = resolve;\n            rejectHash = reject;\n        });\n\n        if (file instanceof File) {\n\n            if (!api.file || !api.file.Hasher) throw new Error(\"missing_woleet_hash_dependency\");\n\n            let hasher = new api.file.Hasher;\n            //noinspection JSUnusedLocalSymbols\n            hasher.on('result', function (message, file) {\n                resolveHash(message.result);\n                if (progressCallback) progressCallback({progress: 1.0, file: File})\n            });\n\n            if (progressCallback && typeof progressCallback == 'function') {\n                hasher.on('progress', progressCallback);\n            }\n\n            hasher.on('error', function (error) {\n                rejectHash(error);\n            });\n\n            hasher.start(file)\n        }\n        else if (typeof file == \"string\") {\n            if (api.isSHA256(file)) {\n                //noinspection JSUnusedAssignment\n                resolveHash(file);\n            }\n            else {\n                //noinspection JSUnusedAssignment\n                rejectHash(new Error(\"parameter_string_not_a_sha256_hash\"));\n            }\n        }\n        else {\n            //noinspection JSUnusedAssignment\n            rejectHash(new Error(\"invalid_parameter\"));\n        }\n\n        return hashPromise;\n    };\n\n    return api;\n});"]}